
AVRASM ver. 2.1.30  D:\codevision\ELEVATOR-1\Debug\List\elevator1.asm Tue Aug 11 14:14:52 2020

D:\codevision\ELEVATOR-1\Debug\List\elevator1.asm(1095): warning: Register r4 already defined by the .DEF directive
D:\codevision\ELEVATOR-1\Debug\List\elevator1.asm(1096): warning: Register r5 already defined by the .DEF directive
D:\codevision\ELEVATOR-1\Debug\List\elevator1.asm(1097): warning: Register r6 already defined by the .DEF directive
D:\codevision\ELEVATOR-1\Debug\List\elevator1.asm(1098): warning: Register r7 already defined by the .DEF directive
D:\codevision\ELEVATOR-1\Debug\List\elevator1.asm(1099): warning: Register r8 already defined by the .DEF directive
D:\codevision\ELEVATOR-1\Debug\List\elevator1.asm(1100): warning: Register r9 already defined by the .DEF directive
D:\codevision\ELEVATOR-1\Debug\List\elevator1.asm(1101): warning: Register r10 already defined by the .DEF directive
D:\codevision\ELEVATOR-1\Debug\List\elevator1.asm(1102): warning: Register r11 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.29 Evaluation
                 ;(C) Copyright 1998-2016 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _up=R4
                 	.DEF _up_msb=R5
                 	.DEF _down=R6
                 	.DEF _down_msb=R7
                 	.DEF _timer=R8
                 	.DEF _timer_msb=R9
                 	.DEF _current=R10
                 	.DEF _current_msb=R11
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0032 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00002a 0000
00002b 0000      	.DB  0x0,0x0,0x0,0x0
00002c 0000
00002d 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 
                 __GLOBAL_INI_TBL:
00002e 0008      	.DW  0x08
00002f 0004      	.DW  0x04
000030 0054      	.DW  __REG_VARS*2
                 
                 _0xFFFFFFFF:
000031 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000032 94f8      	CLI
000033 27ee      	CLR  R30
000034 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000035 e0f1      	LDI  R31,1
000036 bffb      	OUT  GICR,R31
000037 bfeb      	OUT  GICR,R30
000038 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000039 e08d      	LDI  R24,(14-2)+1
00003a e0a2      	LDI  R26,2
00003b 27bb      	CLR  R27
                 __CLEAR_REG:
00003c 93ed      	ST   X+,R30
00003d 958a      	DEC  R24
00003e f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00003f e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000040 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000041 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000042 93ed      	ST   X+,R30
000043 9701      	SBIW R24,1
000044 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000045 e5ec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000046 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000047 9185      	LPM  R24,Z+
000048 9195      	LPM  R25,Z+
000049 9700      	SBIW R24,0
00004a f061      	BREQ __GLOBAL_INI_END
00004b 91a5      	LPM  R26,Z+
00004c 91b5      	LPM  R27,Z+
00004d 9005      	LPM  R0,Z+
00004e 9015      	LPM  R1,Z+
00004f 01bf      	MOVW R22,R30
000050 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000051 9005      	LPM  R0,Z+
000052 920d      	ST   X+,R0
000053 9701      	SBIW R24,1
000054 f7e1      	BRNE __GLOBAL_INI_LOOP
000055 01fb      	MOVW R30,R22
000056 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000057 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000058 bfed      	OUT  SPL,R30
000059 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00005a bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00005b e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00005c e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00005d 940c 005f 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;
                 ;int up = 0, down = 0, timer = 0, current=0;
                 ;
                 ;void main() {
                 ; 0000 0006 void main() {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0007     PORTC=0b00000000;
00005f e0e0      	LDI  R30,LOW(0)
000060 bbe5      	OUT  0x15,R30
                 ; 0000 0008     DDRC=0b00001111;
000061 e0ef      	LDI  R30,LOW(15)
000062 bbe4      	OUT  0x14,R30
                 ; 0000 0009 
                 ; 0000 000A     PORTD=0b00000111;
000063 e0e7      	LDI  R30,LOW(7)
000064 bbe2      	OUT  0x12,R30
                 ; 0000 000B     DDRD=0b00000000;
000065 e0e0      	LDI  R30,LOW(0)
000066 bbe1      	OUT  0x11,R30
                 ; 0000 000C 
                 ; 0000 000D     while (1) {
                 _0x3:
                 ; 0000 000E         if (PIND.0==0) {
000067 9980      	SBIC 0x10,0
000068 c003      	RJMP _0x6
                 ; 0000 000F             delay_ms(250);
000069 d0cb      	RCALL SUBOPT_0x0
                 ; 0000 0010             up++;
00006a 9631      	ADIW R30,1
00006b 012f      	MOVW R4,R30
                 ; 0000 0011         }
                 ; 0000 0012         if (PIND.1==0) {
                 _0x6:
00006c 9981      	SBIC 0x10,1
00006d c008      	RJMP _0x7
                 ; 0000 0013             delay_ms(250);
00006e efaa      	LDI  R26,LOW(250)
00006f d0ca      	RCALL SUBOPT_0x1
                 ; 0000 0014             if (up > 0 || ((current - down) > 0))
000070 f014      	BRLT _0x9
000071 d0ce      	RCALL SUBOPT_0x2
000072 f41c      	BRGE _0x8
                 _0x9:
                 ; 0000 0015                 down++;
000073 01f3      	MOVW R30,R6
000074 9631      	ADIW R30,1
000075 013f      	MOVW R6,R30
                 ; 0000 0016         }
                 _0x8:
                 ; 0000 0017 
                 ; 0000 0018 
                 ; 0000 0019         if (PIND.2==0 && (up > 0 || down > 0)) {
                 _0x7:
000076 9982      	SBIC 0x10,2
000077 c009      	RJMP _0xC
000078 2400      	CLR  R0
000079 1404      	CP   R0,R4
00007a 0405      	CPC  R0,R5
00007b f024      	BRLT _0xD
00007c 2400      	CLR  R0
00007d 1406      	CP   R0,R6
00007e 0407      	CPC  R0,R7
00007f f40c      	BRGE _0xC
                 _0xD:
000080 c001      	RJMP _0xF
                 _0xC:
000081 c0a7      	RJMP _0xB
                 _0xF:
                 ; 0000 001A             delay_ms(250);
000082 d0b2      	RCALL SUBOPT_0x0
                 ; 0000 001B             current += (up - down);
000083 19e6      	SUB  R30,R6
000084 09f7      	SBC  R31,R7
                +
000085 0eae     +ADD R10 , R30
000086 1ebf     +ADC R11 , R31
                 	__ADDWRR 10,11,30,31
                 ; 0000 001C             timer=5;
000087 e0e5      	LDI  R30,LOW(5)
000088 e0f0      	LDI  R31,HIGH(5)
000089 014f      	MOVW R8,R30
                 ; 0000 001D 
                 ; 0000 001E             // going up
                 ; 0000 001F             while (up) {
                 _0x10:
00008a 2c04      	MOV  R0,R4
00008b 2805      	OR   R0,R5
00008c f081      	BREQ _0x12
                 ; 0000 0020                 PORTC.0=1;
00008d 9aa8      	SBI  0x15,0
                 ; 0000 0021                 PORTC.1=0;
00008e 98a9      	CBI  0x15,1
                 ; 0000 0022                 PORTC.3=0;
00008f 98ab      	CBI  0x15,3
                 ; 0000 0023 
                 ; 0000 0024                 PORTC.2=1;
000090 9aaa      	SBI  0x15,2
                 ; 0000 0025                 delay_ms(1000);
000091 eea8      	LDI  R26,LOW(1000)
000092 e0b3      	LDI  R27,HIGH(1000)
000093 d0c6      	RCALL _delay_ms
                 ; 0000 0026                 PORTC.2=0;
000094 98aa      	CBI  0x15,2
                 ; 0000 0027                 PORTC.0=0;
000095 98a8      	CBI  0x15,0
                 ; 0000 0028                 delay_ms(150);
000096 e9a6      	LDI  R26,LOW(150)
000097 e0b0      	LDI  R27,0
000098 d0c1      	RCALL _delay_ms
                 ; 0000 0029 
                 ; 0000 002A                 up--;
000099 01f2      	MOVW R30,R4
00009a 9731      	SBIW R30,1
00009b 012f      	MOVW R4,R30
                 ; 0000 002B             }
00009c cfed      	RJMP _0x10
                 _0x12:
                 ; 0000 002C             PORTC=0x00;
00009d e0e0      	LDI  R30,LOW(0)
00009e bbe5      	OUT  0x15,R30
                 ; 0000 002D 
                 ; 0000 002E             delay_ms(300);
00009f e2ac      	LDI  R26,LOW(300)
0000a0 e0b1      	LDI  R27,HIGH(300)
0000a1 d0b8      	RCALL _delay_ms
                 ; 0000 002F 
                 ; 0000 0030             // going down
                 ; 0000 0031             while (down) {
                 _0x1F:
0000a2 2c06      	MOV  R0,R6
0000a3 2807      	OR   R0,R7
0000a4 f041      	BREQ _0x21
                 ; 0000 0032                 PORTC.0=0;
0000a5 d09f      	RCALL SUBOPT_0x3
                 ; 0000 0033                 PORTC.1=1;
                 ; 0000 0034                 PORTC.2=0;
                 ; 0000 0035 
                 ; 0000 0036                 PORTC.3=1;
                 ; 0000 0037                 delay_ms(1000);
                 ; 0000 0038                 PORTC.3=0;
                 ; 0000 0039                 PORTC.1=0;
                 ; 0000 003A                 delay_ms(150);
0000a6 e9a6      	LDI  R26,LOW(150)
0000a7 e0b0      	LDI  R27,0
0000a8 d0b1      	RCALL _delay_ms
                 ; 0000 003B 
                 ; 0000 003C                 down--;
0000a9 01f3      	MOVW R30,R6
0000aa 9731      	SBIW R30,1
0000ab 013f      	MOVW R6,R30
                 ; 0000 003D             }
0000ac cff5      	RJMP _0x1F
                 _0x21:
                 ; 0000 003E             PORTC=0x00;
0000ad e0e0      	LDI  R30,LOW(0)
0000ae bbe5      	OUT  0x15,R30
                 ; 0000 003F             // back to GROUND floor after 5 sec.
                 ; 0000 0040 
                 ; 0000 0041             if (current > 0) {
0000af 2400      	CLR  R0
0000b0 140a      	CP   R0,R10
0000b1 040b      	CPC  R0,R11
0000b2 f00c      	BRLT PC+2
0000b3 c072      	RJMP _0x2E
                 ; 0000 0042                 // waiting for UP or down to be pressed for 5 seconds ....
                 ; 0000 0043                 do {
                 _0x30:
                 ; 0000 0044                     delay_ms(200);
0000b4 eca8      	LDI  R26,LOW(200)
0000b5 e0b0      	LDI  R27,0
0000b6 d0a3      	RCALL _delay_ms
                 ; 0000 0045                     if (PIND.0==0){
0000b7 9980      	SBIC 0x10,0
0000b8 c002      	RJMP _0x32
                 ; 0000 0046                         delay_ms(200);
0000b9 d095      	RCALL SUBOPT_0x4
                 ; 0000 0047                         up++;
                 ; 0000 0048                         break;
0000ba c05b      	RJMP _0x31
                 ; 0000 0049                     }
                 ; 0000 004A                     if (PIND.1==0){
                 _0x32:
0000bb 9981      	SBIC 0x10,1
0000bc c009      	RJMP _0x33
                 ; 0000 004B                         delay_ms(200);
0000bd eca8      	LDI  R26,LOW(200)
0000be d07b      	RCALL SUBOPT_0x1
                 ; 0000 004C                         if (up > 0 || ((current - down) > 0))
0000bf f014      	BRLT _0x35
0000c0 d07f      	RCALL SUBOPT_0x2
0000c1 f41c      	BRGE _0x34
                 _0x35:
                 ; 0000 004D                             down++;
0000c2 01f3      	MOVW R30,R6
0000c3 9631      	ADIW R30,1
0000c4 013f      	MOVW R6,R30
                 ; 0000 004E                         break;
                 _0x34:
0000c5 c050      	RJMP _0x31
                 ; 0000 004F                     }
                 ; 0000 0050                     delay_ms(200);
                 _0x33:
0000c6 eca8      	LDI  R26,LOW(200)
0000c7 e0b0      	LDI  R27,0
0000c8 d091      	RCALL _delay_ms
                 ; 0000 0051                     if (PIND.0==0){
0000c9 9980      	SBIC 0x10,0
0000ca c002      	RJMP _0x37
                 ; 0000 0052                         delay_ms(200);
0000cb d083      	RCALL SUBOPT_0x4
                 ; 0000 0053                         up++;
                 ; 0000 0054                         break;
0000cc c049      	RJMP _0x31
                 ; 0000 0055                     }
                 ; 0000 0056                     if (PIND.1==0){
                 _0x37:
0000cd 9981      	SBIC 0x10,1
0000ce c009      	RJMP _0x38
                 ; 0000 0057                         delay_ms(200);
0000cf eca8      	LDI  R26,LOW(200)
0000d0 d069      	RCALL SUBOPT_0x1
                 ; 0000 0058                         if (up > 0 || ((current - down) > 0))
0000d1 f014      	BRLT _0x3A
0000d2 d06d      	RCALL SUBOPT_0x2
0000d3 f41c      	BRGE _0x39
                 _0x3A:
                 ; 0000 0059                             down++;
0000d4 01f3      	MOVW R30,R6
0000d5 9631      	ADIW R30,1
0000d6 013f      	MOVW R6,R30
                 ; 0000 005A                         break;
                 _0x39:
0000d7 c03e      	RJMP _0x31
                 ; 0000 005B                     }
                 ; 0000 005C                     delay_ms(200);
                 _0x38:
0000d8 eca8      	LDI  R26,LOW(200)
0000d9 e0b0      	LDI  R27,0
0000da d07f      	RCALL _delay_ms
                 ; 0000 005D                     if (PIND.0==0){
0000db 9980      	SBIC 0x10,0
0000dc c002      	RJMP _0x3C
                 ; 0000 005E                         delay_ms(200);
0000dd d071      	RCALL SUBOPT_0x4
                 ; 0000 005F                         up++;
                 ; 0000 0060                         break;
0000de c037      	RJMP _0x31
                 ; 0000 0061                     }
                 ; 0000 0062                     if (PIND.1==0){
                 _0x3C:
0000df 9981      	SBIC 0x10,1
0000e0 c009      	RJMP _0x3D
                 ; 0000 0063                         delay_ms(200);
0000e1 eca8      	LDI  R26,LOW(200)
0000e2 d057      	RCALL SUBOPT_0x1
                 ; 0000 0064                         if (up > 0 || ((current - down) > 0))
0000e3 f014      	BRLT _0x3F
0000e4 d05b      	RCALL SUBOPT_0x2
0000e5 f41c      	BRGE _0x3E
                 _0x3F:
                 ; 0000 0065                             down++;
0000e6 01f3      	MOVW R30,R6
0000e7 9631      	ADIW R30,1
0000e8 013f      	MOVW R6,R30
                 ; 0000 0066                         break;
                 _0x3E:
0000e9 c02c      	RJMP _0x31
                 ; 0000 0067                     }
                 ; 0000 0068                     delay_ms(200);
                 _0x3D:
0000ea eca8      	LDI  R26,LOW(200)
0000eb e0b0      	LDI  R27,0
0000ec d06d      	RCALL _delay_ms
                 ; 0000 0069                     if (PIND.0==0){
0000ed 9980      	SBIC 0x10,0
0000ee c002      	RJMP _0x41
                 ; 0000 006A                         delay_ms(200);
0000ef d05f      	RCALL SUBOPT_0x4
                 ; 0000 006B                         up++;
                 ; 0000 006C                         break;
0000f0 c025      	RJMP _0x31
                 ; 0000 006D                     }
                 ; 0000 006E                     if (PIND.1==0){
                 _0x41:
0000f1 9981      	SBIC 0x10,1
0000f2 c009      	RJMP _0x42
                 ; 0000 006F                         delay_ms(200);
0000f3 eca8      	LDI  R26,LOW(200)
0000f4 d045      	RCALL SUBOPT_0x1
                 ; 0000 0070                         if (up > 0 || ((current - down) > 0))
0000f5 f014      	BRLT _0x44
0000f6 d049      	RCALL SUBOPT_0x2
0000f7 f41c      	BRGE _0x43
                 _0x44:
                 ; 0000 0071                             down++;
0000f8 01f3      	MOVW R30,R6
0000f9 9631      	ADIW R30,1
0000fa 013f      	MOVW R6,R30
                 ; 0000 0072                         break;
                 _0x43:
0000fb c01a      	RJMP _0x31
                 ; 0000 0073                     }
                 ; 0000 0074                     delay_ms(200);
                 _0x42:
0000fc eca8      	LDI  R26,LOW(200)
0000fd e0b0      	LDI  R27,0
0000fe d05b      	RCALL _delay_ms
                 ; 0000 0075                     if (PIND.0==0){
0000ff 9980      	SBIC 0x10,0
000100 c002      	RJMP _0x46
                 ; 0000 0076                         delay_ms(200);
000101 d04d      	RCALL SUBOPT_0x4
                 ; 0000 0077                         up++;
                 ; 0000 0078                         break;
000102 c013      	RJMP _0x31
                 ; 0000 0079                     }
                 ; 0000 007A                     if (PIND.1==0){
                 _0x46:
000103 9981      	SBIC 0x10,1
000104 c009      	RJMP _0x47
                 ; 0000 007B                         delay_ms(200);
000105 eca8      	LDI  R26,LOW(200)
000106 d033      	RCALL SUBOPT_0x1
                 ; 0000 007C                         if (up > 0 || ((current - down) > 0))
000107 f014      	BRLT _0x49
000108 d037      	RCALL SUBOPT_0x2
000109 f41c      	BRGE _0x48
                 _0x49:
                 ; 0000 007D                             down++;
00010a 01f3      	MOVW R30,R6
00010b 9631      	ADIW R30,1
00010c 013f      	MOVW R6,R30
                 ; 0000 007E                         break;
                 _0x48:
00010d c008      	RJMP _0x31
                 ; 0000 007F                     }
                 ; 0000 0080                     timer--;
                 _0x47:
00010e 01f4      	MOVW R30,R8
00010f 9731      	SBIW R30,1
000110 014f      	MOVW R8,R30
                 ; 0000 0081                 } while (timer > 0);
000111 2400      	CLR  R0
000112 1408      	CP   R0,R8
000113 0409      	CPC  R0,R9
000114 f40c      	BRGE _0x31
000115 cf9e      	RJMP _0x30
                 _0x31:
                 ; 0000 0082 
                 ; 0000 0083                 // going back to ground
                 ; 0000 0084                 if (timer == 0) {
000116 2c08      	MOV  R0,R8
000117 2809      	OR   R0,R9
000118 f461      	BRNE _0x4B
                 ; 0000 0085                     while (current>0) {
                 _0x4C:
000119 2400      	CLR  R0
00011a 140a      	CP   R0,R10
00011b 040b      	CPC  R0,R11
00011c f444      	BRGE _0x4E
                 ; 0000 0086                         PORTC.0=0;
00011d d027      	RCALL SUBOPT_0x3
                 ; 0000 0087                         PORTC.1=1;
                 ; 0000 0088                         PORTC.2=0;
                 ; 0000 0089 
                 ; 0000 008A                         PORTC.3=1;
                 ; 0000 008B                         delay_ms(1000);
                 ; 0000 008C                         PORTC.3=0;
                 ; 0000 008D                         PORTC.1=0;
                 ; 0000 008E                         delay_ms(100);
00011e e6a4      	LDI  R26,LOW(100)
00011f e0b0      	LDI  R27,0
000120 d039      	RCALL _delay_ms
                 ; 0000 008F 
                 ; 0000 0090                         current--;
000121 01f5      	MOVW R30,R10
000122 9731      	SBIW R30,1
000123 015f      	MOVW R10,R30
                 ; 0000 0091                     }
000124 cff4      	RJMP _0x4C
                 _0x4E:
                 ; 0000 0092                 }
                 ; 0000 0093                 PORTC.1=0;
                 _0x4B:
000125 98a9      	CBI  0x15,1
                 ; 0000 0094             }
                 ; 0000 0095 
                 ; 0000 0096             timer=5;
                 _0x2E:
000126 e0e5      	LDI  R30,LOW(5)
000127 e0f0      	LDI  R31,HIGH(5)
000128 014f      	MOVW R8,R30
                 ; 0000 0097         }
                 ; 0000 0098 
                 ; 0000 0099         PORTC=0b00000000;
                 _0xB:
000129 e0e0      	LDI  R30,LOW(0)
00012a bbe5      	OUT  0x15,R30
                 ; 0000 009A         PORTD=0b00000111;
00012b e0e7      	LDI  R30,LOW(7)
00012c bbe2      	OUT  0x12,R30
                 ; 0000 009B 
                 ; 0000 009C         if (current < 0)
00012d 2400      	CLR  R0
00012e 14a0      	CP   R10,R0
00012f 04b0      	CPC  R11,R0
000130 f414      	BRGE _0x5D
                 ; 0000 009D             current = 0;
000131 24aa      	CLR  R10
000132 24bb      	CLR  R11
                 ; 0000 009E     }
                 _0x5D:
000133 cf33      	RJMP _0x3
                 ; 0000 009F }
                 _0x5E:
000134 cfff      	RJMP _0x5E
                 ; .FEND
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000135 efaa      	LDI  R26,LOW(250)
000136 e0b0      	LDI  R27,0
000137 d022      	RCALL _delay_ms
000138 01f2      	MOVW R30,R4
000139 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x1:
00013a e0b0      	LDI  R27,0
00013b d01e      	RCALL _delay_ms
00013c 2400      	CLR  R0
00013d 1404      	CP   R0,R4
00013e 0405      	CPC  R0,R5
00013f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x2:
000140 01d5      	MOVW R26,R10
000141 19a6      	SUB  R26,R6
000142 09b7      	SBC  R27,R7
000143 d012      	RCALL __CPW02
000144 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x3:
000145 98a8      	CBI  0x15,0
000146 9aa9      	SBI  0x15,1
000147 98aa      	CBI  0x15,2
000148 9aab      	SBI  0x15,3
000149 eea8      	LDI  R26,LOW(1000)
00014a e0b3      	LDI  R27,HIGH(1000)
00014b d00e      	RCALL _delay_ms
00014c 98ab      	CBI  0x15,3
00014d 98a9      	CBI  0x15,1
00014e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x4:
00014f eca8      	LDI  R26,LOW(200)
000150 e0b0      	LDI  R27,0
000151 d008      	RCALL _delay_ms
000152 01f2      	MOVW R30,R4
000153 9631      	ADIW R30,1
000154 012f      	MOVW R4,R30
000155 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __CPW02:
000156 2400      	CLR  R0
000157 160a      	CP   R0,R26
000158 060b      	CPC  R0,R27
000159 9508      	RET
                 
                 _delay_ms:
00015a 9610      	adiw r26,0
00015b f039      	breq __delay_ms1
                 __delay_ms0:
00015c 95a8      	wdr
                +
00015d ed80     +LDI R24 , LOW ( 0x7D0 )
00015e e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
00015f 9701     +SBIW R24 , 1
000160 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000161 9711      	sbiw r26,1
000162 f7c9      	brne __delay_ms0
                 __delay_ms1:
000163 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  34 r1 :   1 r2 :   0 r3 :   0 r4 :   9 r5 :   3 r6 :  18 r7 :   4 
r8 :   6 r9 :   2 r10:   8 r11:   5 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   0 r17:   0 r18:   0 r19:   0 r20:   0 r21:   0 r22:   2 r23:   0 
r24:   9 r25:   3 r26:  27 r27:  18 r28:   1 r29:   1 r30:  72 r31:   7 
x  :   3 y  :   0 z  :   7 
Registers used: 21 out of 35 (60.0%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   1 
adiw  :   9 and   :   0 andi  :   0 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   4 
brge  :  10 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   8 brmi  :   0 brne  :   6 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   0 
cbi   :   9 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  12 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   8 cpc   :   8 cpi   :   0 cpse  :   0 dec   :   1 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   0 inc   :   0 jmp   :  22 ld    :   0 ldd   :   0 ldi   :  59 
lds   :   0 lpm   :   7 lsl   :   0 lsr   :   0 mov   :   3 movw  :  30 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   3 
ori   :   0 out   :  14 pop   :   0 push  :   0 rcall :  36 ret   :   7 
reti  :   0 rjmp  :  33 rol   :   0 ror   :   0 sbc   :   2 sbci  :   0 
sbi   :   4 sbic  :  13 sbis  :   0 sbiw  :   9 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :   3 std   :   0 sts   :   0 sub   :   2 subi  :   0 swap  :   0 
tst   :   0 wdr   :   1 
Instructions used: 30 out of 116 (25.9%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0002c8    696     16    712   16384   4.3%
[.dseg] 0x000060 0x000160      0      0      0    1024   0.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 8 warnings
